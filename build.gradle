ext {
    functionalTestDir='src/functional/java'
}

apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.easymock', name: 'easymock', version: '3.+'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}


sourceSets {
    functional {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        java { srcDir functionalTestDir }
    }
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functional.output.classesDir
    classpath = sourceSets.functional.runtimeClasspath
}

eclipse.classpath.file.whenMerged { classpath ->
    def genSrc = new org.gradle.plugins.ide.eclipse.model.SourceFolder(functionalTestDir, null)
    classpath.entries.add(genSrc)
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        compileJava.execute()
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [kind: 'src', path: functionalTestDir]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}
